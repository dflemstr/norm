use ast;
use parser;

use std::str::FromStr;

grammar;

extern {
    type Location = usize;
    type Error = parser::Error;
}

#[inline]
Comma<A>: Vec<A> = {
    <v:(<A> ",")*> <e: A?> => {
        let mut v = v;
        v.extend(e);
        v
    },
}

#[inline]
Semi<A>: Vec<A> = {
    <v:(<A> ";")*> <e: A> => {
        let mut v = v;
        v.push(e);
        v
    },
}

#[inline]
SemiRequired<A>: Vec<A> = {
    <(<A> ";")*> => <>,
}

pub Norm: ast::Norm = {
    SemiRequired<(Comment? <Definition>)> => ast::Norm { definitions: <> },
}

pub Comment: () = {
    r"/\*(\*[^/]|[^*])*\*/"=> ()
}

pub Definition: (ast::Identifier, ast::Expression) = {
    <Identifier> "=" <Expression> => (<>),
}

pub Expression: ast::Expression = {
    Identifier => ast::Expression::Identifier(<>),
    Number => ast::Expression::Number(<>),
    String => ast::Expression::String(<>),
    Tuple => ast::Expression::Tuple(<>),
    Record => ast::Expression::Record(<>),
    Lambda => ast::Expression::Lambda(<>),
    Select => ast::Expression::Select(<>),
    Apply => ast::Expression::Apply(<>),
}

pub Identifier: ast::Identifier = {
    r"\p{XID_Start}\p{XID_Continue}*" => ast::Identifier(<>.into()),
}

pub Tuple: ast::Tuple = {
    "(" <Comma<Expression>> ")" => ast::Tuple { fields: <> },
}

pub Record: ast::Record = {
    "{" <Comma<Field>> "}" => ast::Record { fields: <> },
}

pub Field: (ast::Identifier, ast::Expression) = {
     <Identifier> ":" <Expression> => (<>)
}

pub Number: f64 = {
    r"-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?" => f64::from_str(<>).unwrap(),
}

pub String: String = {
    r#""(?:[^"\\]|\\(?:["\\/bfnrt]|u\{[a-fA-F0-9]{1,6}\}))*""# => parser::parse_escaped_string(<>).into_owned(),
}

pub Lambda: ast::Lambda = {
    "|" <params:Comma<(Comment? <Parameter>)>> "|" <sig:(":" <Expression>)?> "{" <stmts:Semi<(Comment? <Statement>)>> "}" =>
        ast::Lambda { parameters: params, signature: sig.map(Box::new), statements: stmts },
}

pub Statement: ast::Statement = {
    <d:Definition> => ast::Statement::Definition(d.0, d.1),
    <Expression> => ast::Statement::Expression(<>),
}

pub Select: ast::Select = {
    <e:Expression> "." <f:Identifier> => ast::Select { expression: Box::new(e), field: f },
}

pub Apply: ast::Apply = {
    <e:Expression> "(" <p:Comma<Expression>> ")" => ast::Apply { function: Box::new(e), parameters: p },
}

pub Parameter: ast::Parameter = {
    <name:Identifier> <signature:(":" <Expression>)?> => ast::Parameter { <> },
}
