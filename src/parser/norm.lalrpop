use ast;
use parser;

use std::str::FromStr;

#[LALR]
grammar;

extern {
    type Location = usize;
    type Error = parser::Error;
}

#[inline]
Comma<A>: Vec<A> = {
    <v:(<A> ",")*> <e: A?> => {
        let mut v = v;
        v.extend(e);
        v
    },
}

#[inline]
Semi<A>: Vec<A> = {
    <v:(<A> ";")*> <e: A> => {
        let mut v = v;
        v.push(e);
        v
    },
}

#[inline]
SemiRequired<A>: Vec<A> = {
    <(<A> ";")*> => <>,
}

pub Module: ast::Module<parser::Context> = {
    <lo:@L> <ds:SemiRequired<(Comment? <Definition>)>> <hi:@R> =>
        ast::Module { context: parser::Context::new(ast::Kind::Module, lo, hi), variables: ds },
}

Comment: () = {
    r"/\*(\*[^/]|[^*])*\*/"=> ()
}

pub Definition: ast::Variable<parser::Context> = {
    <lo:@L> <n:Identifier> "=" <i:Expression> <hi:@R> =>
        ast::Variable { context: parser::Context::new(ast::Kind::Variable, lo, hi), name: n, initializer: i },
}

pub Expression: ast::Expression<parser::Context> = {
    Identifier => ast::Expression::Identifier(<>),
    Number => ast::Expression::Number(<>),
    String => ast::Expression::String(<>),
    Tuple => ast::Expression::Tuple(<>),
    Record => ast::Expression::Record(<>),
    Lambda => ast::Expression::Lambda(<>),
    Select => ast::Expression::Select(<>),
    Apply => ast::Expression::Apply(<>),
}

pub Identifier: ast::Identifier<parser::Context> = {
    <lo:@L> <id:r"\p{XID_Start}\p{XID_Continue}*"> <hi:@R> =>
        ast::Identifier { context: parser::Context::new(ast::Kind::Identifier, lo, hi), value: id.into() },
}

pub Tuple: ast::Tuple<parser::Context> = {
    <lo:@L> "(" <fs:Comma<Expression>> ")" <hi:@R> =>
        ast::Tuple { context: parser::Context::new(ast::Kind::Tuple, lo, hi), fields: fs },
}

pub Record: ast::Record<parser::Context> = {
    <lo:@L> "{" <fs:Comma<Field>> "}" <hi:@R> =>
        ast::Record { context: parser::Context::new(ast::Kind::Record, lo, hi), fields: fs },
}

pub Field: (ast::Identifier<parser::Context>, ast::Expression<parser::Context>) = {
     <Identifier> ":" <Expression> => (<>),
}

pub Number: ast::NumberLiteral<parser::Context> = {
    <lo:@L> <v:r"-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?(?:u8|u16|u32|u64|i8|i16|i32|i64|f32|f64)"> <hi:@R> =>
        ast::NumberLiteral {
            context: parser::Context::new(ast::Kind::NumberLiteral, lo, hi),
            value: if v.ends_with("u8") {
                ast::NumberValue::U8(u8::from_str(&v[..v.len() - 2]).unwrap())
            } else if v.ends_with("u16") {
                ast::NumberValue::U16(u16::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("u32") {
                ast::NumberValue::U32(u32::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("u64") {
                ast::NumberValue::U64(u64::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("i8") {
                ast::NumberValue::I8(i8::from_str(&v[..v.len() - 2]).unwrap())
            } else if v.ends_with("i16") {
                ast::NumberValue::I16(i16::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("i32") {
                ast::NumberValue::I32(i32::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("i64") {
                ast::NumberValue::I64(i64::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("f32") {
                ast::NumberValue::F32(f32::from_str(&v[..v.len() - 3]).unwrap())
            } else if v.ends_with("f64") {
                ast::NumberValue::F64(f64::from_str(&v[..v.len() - 3]).unwrap())
            } else {
                unreachable!()
            }
        },
}

pub String: ast::StringLiteral<parser::Context> = {
    <lo:@L> <v:r#""(?:[^"\\]|\\(?:["\\/bfnrt]|u\{[a-fA-F0-9]{1,6}\}))*""#> <hi:@R> =>
        ast::StringLiteral { context: parser::Context::new(ast::Kind::StringLiteral, lo, hi), value: parser::util::parse_escaped_string(v).into_owned() },
}

pub Lambda: ast::Lambda<parser::Context> = {
    <lo:@L> "|" <params:Comma<(Comment? <Parameter>)>> "|" <sig:Expression?> "{" <stmts:SemiRequired<(Comment? <Statement>)>> <res:(Comment? <Expression>)> "}" <hi:@R> =>
        ast::Lambda { context: parser::Context::new(ast::Kind::Lambda, lo, hi), parameters: params, signature: sig.map(Box::new), statements: stmts, result: Box::new(res) },
}

pub Statement: ast::Statement<parser::Context> = {
    <Definition> => ast::Statement::Variable(<>),
    <Expression> => ast::Statement::Expression(<>),
}

pub Select: ast::Select<parser::Context> = {
    <lo:@L> <r:Expression> "." <f:Identifier> <hi:@R> =>
        ast::Select { context: parser::Context::new(ast::Kind::Select, lo, hi), record: Box::new(r), field: f },
}

pub Apply: ast::Apply<parser::Context> = {
    <lo:@L> <e:Expression> "(" <p:Comma<Expression>> ")" <hi:@R> =>
        ast::Apply { context: parser::Context::new(ast::Kind::Apply, lo, hi), function: Box::new(e), parameters: p },
}

pub Parameter: ast::Parameter<parser::Context> = {
    <lo:@L> <name:Identifier> <signature:(":" <Expression>)?> <hi:@R> =>
        ast::Parameter { context: parser::Context::new(ast::Kind::Parameter, lo, hi), name, signature },
}
